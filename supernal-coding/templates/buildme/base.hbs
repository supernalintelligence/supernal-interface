#!/bin/bash

# ============================================================================
# {{familyName}} - Supernal Family Repository Build Script
# Profile: {{profile}}
# Generated: {{formatDate generatedAt}}
# Supernal-Coding Version: {{version}}
# ============================================================================

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
FAMILY_NAME="{{familyName}}"
PROFILE="{{profile}}"
NODE_VERSION="{{nodeVersion}}"
TOOLS=({{#each tools}}"{{this}}" {{/each}})

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check system requirements
check_requirements() {
    log_info "Checking system requirements..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js is not installed. Please install Node.js {{nodeVersion}} or higher."
        exit 1
    fi
    
    local node_version=$(node --version | sed 's/v//')
    log_info "Node.js version: $node_version"
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        log_error "npm is not installed. Please install npm."
        exit 1
    fi
    
    local npm_version=$(npm --version)
    log_info "npm version: $npm_version"
    
    {{#ifContains tools 'docker'}}
    # Check Docker (if using Docker)
    if ! command -v docker &> /dev/null; then
        log_warning "Docker is not installed. Some features may not work."
    else
        log_info "Docker version: $(docker --version)"
    fi
    {{/ifContains}}
    
    {{#ifContains tools 'git'}}
    # Check Git
    if ! command -v git &> /dev/null; then
        log_error "Git is not installed. Please install Git."
        exit 1
    fi
    
    log_info "Git version: $(git --version)"
    {{/ifContains}}
    
    log_success "System requirements check completed"
}

# Initialize git repository
init_git() {
    if [ ! -d ".git" ]; then
        log_info "Initializing Git repository..."
        git init
        
        # Create .gitignore
        cat > .gitignore << EOF
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
dist/
build/
{{#ifEquals profile 'supernal-web'}}
# Vite
.vite/
{{/ifEquals}}

# IDEs
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

{{#ifContains tools 'docker'}}
# Docker
.dockerignore
{{/ifContains}}

{{#ifContains tools 'typescript'}}
# TypeScript
*.tsbuildinfo
{{/ifContains}}

{{#ifContains tools 'jest'}}
# Testing
coverage/
{{/ifContains}}

# Logs
logs
*.log

# Temporary files
tmp/
temp/
EOF
        
        log_success "Git repository initialized"
    else
        log_info "Git repository already exists"
    fi
}

# Install dependencies
install_dependencies() {
    log_info "Installing dependencies..."
    
    if [ -f "package.json" ]; then
        npm install
        log_success "Dependencies installed"
    else
        log_error "package.json not found"
        exit 1
    fi
}

# Setup tools
setup_tools() {
    log_info "Setting up tools..."
    
    {{#ifContains tools 'typescript'}}
    # TypeScript setup
    if [[ " ${TOOLS[@]} " =~ " typescript " ]]; then
        if [ ! -f "tsconfig.json" ]; then
            log_info "Creating TypeScript configuration..."
            npx tsc --init
            log_success "TypeScript configured"
        fi
    fi
    {{/ifContains}}
    
    {{#ifContains tools 'eslint'}}
    # ESLint setup
    if [[ " ${TOOLS[@]} " =~ " eslint " ]]; then
        if [ ! -f ".eslintrc.json" ]; then
            log_info "Setting up ESLint..."
            npx eslint --init
            log_success "ESLint configured"
        fi
    fi
    {{/ifContains}}
    
    {{#ifContains tools 'prettier'}}
    # Prettier setup
    if [[ " ${TOOLS[@]} " =~ " prettier " ]]; then
        if [ ! -f ".prettierrc" ]; then
            log_info "Creating Prettier configuration..."
            cat > .prettierrc << EOF
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}
EOF
            log_success "Prettier configured"
        fi
    fi
    {{/ifContains}}
    
    {{#ifContains tools 'prisma'}}
    # Prisma setup
    if [[ " ${TOOLS[@]} " =~ " prisma " ]]; then
        if [ ! -f "prisma/schema.prisma" ]; then
            log_info "Setting up Prisma..."
            npx prisma init
            log_success "Prisma configured"
        fi
    fi
    {{/ifContains}}
    
    {{#ifContains tools 'docker'}}
    # Docker setup
    if [[ " ${TOOLS[@]} " =~ " docker " ]]; then
        if [ ! -f "Dockerfile" ]; then
            log_info "Creating Dockerfile..."
            cat > Dockerfile << EOF
FROM node:{{nodeVersion}}-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

{{#ifEquals profile 'supernal-web'}}
RUN npm run build

EXPOSE 3000
CMD ["npm", "start"]
{{else}}
EXPOSE 3000
CMD ["npm", "start"]
{{/ifEquals}}
EOF
            log_success "Dockerfile created"
        fi
    fi
    {{/ifContains}}
    
    log_success "Tools setup completed"
}

# Create project structure
create_structure() {
    log_info "Creating project structure..."
    
    # Create directories
    mkdir -p {src,tests,docs,scripts}
    
    {{#ifEquals profile 'supernal-web'}}
    mkdir -p {src/components,src/pages,src/hooks,src/utils,src/styles,public}
    {{/ifEquals}}
    
    {{#ifEquals profile 'supernal-command'}}
    mkdir -p {src/commands,src/utils,bin}
    {{/ifEquals}}
    
    {{#ifEquals profile 'supernal-social'}}
    mkdir -p {src/routes,src/middleware,src/services,src/models}
    {{/ifEquals}}
    
    # Create entry point
    if [ ! -f "src/index.js" ]; then
        cat > src/index.js << 'EOF'
{{#ifEquals profile 'supernal-web'}}
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
{{else}}
{{#ifEquals profile 'supernal-command'}}
#!/usr/bin/env node

console.log('🚀 {{familyName}} is running!');
console.log('Profile: {{profile}}');
console.log('Generated with supernal-coding');
{{else}}
console.log('🚀 {{familyName}} is running!');
console.log('Profile: {{profile}}');
console.log('Generated with supernal-coding');
{{/ifEquals}}
{{/ifEquals}}
EOF
        log_success "Entry point created"
    fi
    
    log_success "Project structure created"
}

# Run initial build/test
initial_validation() {
    log_info "Running initial validation..."
    
    # Run linting if available
    if npm run lint --silent 2>/dev/null; then
        log_success "Linting passed"
    else
        log_warning "Linting not configured or failed"
    fi
    
    # Run tests if available
    if npm run test --silent 2>/dev/null; then
        log_success "Tests passed"
    else
        log_warning "Tests not configured or failed"
    fi
    
    log_success "Initial validation completed"
}

# Main build process
main() {
    echo "============================================================================"
    echo "🚀 Building {{familyName}} ({{profile}})"
    echo "============================================================================"
    
    check_requirements
    init_git
    install_dependencies
    setup_tools
    create_structure
    initial_validation
    
    echo "============================================================================"
    log_success "🎉 {{familyName}} setup completed successfully!"
    echo "============================================================================"
    
    echo ""
    log_info "Next steps:"
    echo "  1. Review the generated files"
    echo "  2. Customize configuration as needed"
    echo "  3. Start development: npm run dev"
    {{#ifContains tools 'docker'}}
    echo "  4. For Docker: npm run docker:build && npm run docker:run"
    {{/ifContains}}
    echo ""
    log_info "For more information, see docs/README.md"
}

# Handle script arguments
case "${1:-}" in
    "help"|"--help"|"-h")
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  (no args)  Run full setup"
        echo "  deps       Install dependencies only"
        echo "  tools      Setup tools only"
        echo "  structure  Create project structure only"
        echo "  help       Show this help"
        exit 0
        ;;
    "deps")
        install_dependencies
        ;;
    "tools")
        setup_tools
        ;;
    "structure")
        create_structure
        ;;
    *)
        main
        ;;
esac 