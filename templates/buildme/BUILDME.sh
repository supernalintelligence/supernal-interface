#!/bin/bash
# BUILDME.sh - AI-optimized build script template
# Generated by supernal-code package

# Configuration
QUIET_MODE=false
SHOW_COLORS=true
RUN_SMOKE_TESTS=true

# Color definitions for human readability
if [[ "$SHOW_COLORS" == "true" ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
else
    RED='' GREEN='' YELLOW='' BLUE='' NC=''
fi

# Minimal output function for AI consumption
log_ai() {
    if [[ "$QUIET_MODE" == "false" ]]; then
        echo "$1"
    fi
}

# Colored output for human consumption
log_human() {
    if [[ "$SHOW_COLORS" == "true" ]]; then
        echo -e "${2}$1${NC}"
    else
        echo "$1"
    fi
}

# Build steps with smoke tests
build_main() {
    log_ai "Starting build process..."
    log_human "üî® Starting build process..." "$BLUE"
    
    # Install dependencies if needed
    if [[ -f "package.json" ]]; then
        log_ai "Installing dependencies..."
        log_human "üì¶ Installing dependencies..." "$BLUE"
        npm ci --silent || npm install --silent
    fi
    
    # Run build commands based on project type
    if [[ -f "package.json" ]] && npm run | grep -q "build"; then
        log_ai "Running npm build..."
        log_human "‚öôÔ∏è  Running build..." "$BLUE"
        npm run build
    elif [[ -f "Makefile" ]]; then
        log_ai "Running make build..."
        log_human "‚öôÔ∏è  Running make build..." "$BLUE"
        make build
    elif [[ -f "build.sh" ]]; then
        log_ai "Running build.sh..."
        log_human "‚öôÔ∏è  Running build script..." "$BLUE"
        ./build.sh
    else
        log_ai "No build command found, skipping..."
        log_human "‚ÑπÔ∏è  No build command found, skipping..." "$YELLOW"
    fi
    
    if [[ "$RUN_SMOKE_TESTS" == "true" ]]; then
        run_smoke_tests
    fi
}

# Simple smoke tests to catch runtime errors
run_smoke_tests() {
    log_ai "Running smoke tests..."
    log_human "üö≠ Running smoke tests..." "$YELLOW"
    
    # Test Node.js module imports if applicable
    if [[ -f "package.json" ]]; then
        MAIN_FILE=$(node -pe "require('./package.json').main || 'index.js'")
        if [[ -f "$MAIN_FILE" ]]; then
            log_ai "Testing module import: $MAIN_FILE"
            node -e "require('./$MAIN_FILE')" > /dev/null 2>&1 || {
                log_human "‚ùå Module import failed for $MAIN_FILE" "$RED"
                return 1
            }
        fi
    fi
    
    # Check if essential configuration files exist
    for config_file in "config.json" ".env.example" "supernal-code.config.toml"; do
        if [[ -f "$config_file" ]]; then
            log_ai "Found configuration: $config_file"
        fi
    done
    
    # Test basic functionality if test command exists
    if [[ -f "package.json" ]] && npm run | grep -q "test:smoke"; then
        log_ai "Running smoke test suite..."
        npm run test:smoke > /dev/null 2>&1 || {
            log_human "‚ùå Smoke test suite failed" "$RED"
            return 1
        }
    fi
    
    log_human "‚úÖ Smoke tests passed" "$GREEN"
}

# Error handling
set -e
trap 'log_human "‚ùå Build failed" "$RED"; exit 1' ERR

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --quiet|-q)
            QUIET_MODE=true
            shift
            ;;
        --no-colors)
            SHOW_COLORS=false
            shift
            ;;
        --no-smoke-tests)
            RUN_SMOKE_TESTS=false
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --quiet, -q           Minimize output for AI consumption"
            echo "  --no-colors          Disable colored output"
            echo "  --no-smoke-tests     Skip smoke tests"
            echo "  --help, -h           Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Main execution
build_main
log_ai "Build completed successfully"
log_human "‚úÖ Build completed successfully" "$GREEN" 